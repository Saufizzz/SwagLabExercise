import inspect
import pytest
import logging
import openpyxl

from selenium.webdriver import ActionChains
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
@pytest.mark.usefixtures("setup_and_teardown")
class BaseClass:
    def SelectOption(self, locator, index):
        sel = Select(locator)
        sel.select_by_index(index)

    def ActionMove(self,locator1):
        return ActionChains(self.driver).move_to_element(locator1)

    def WaitElement(self, locator):
        WebDriverWait(self.driver,30).until((EC.presence_of_element_located(locator)))
    def getLogger(self):
        #This line retrieves the name of the calling function (the function that called the function containing this code). It uses the inspect module to inspect the call stack and retrieves the name of the function at index 1, which is the immediate caller, and then selects the third element of the tuple returned by inspect.stack(), which is the name of the function.
        loggerName = inspect.stack()[1][3]
        #This line creates a logger object using the name of the calling function obtained in the previous line. It uses the getLogger function from the logging module to get or create a logger with the specified name.
        logger = logging.getLogger(loggerName)
        #This line creates a FileHandler object named filehandler, which will be responsible for writing log records to a file named "logfile.log".
        filehandler = logging.FileHandler("logfile.log")
        #This line creates a Formatter object named formatter with a specified format. The format string "%(asctime)s : %(levelname)s : %(name)s : %(message)s" specifies the format for log records. It includes placeholders like %(asctime)s for the time of the log message, %(levelname)s for the log level, %(name)s for the logger name, and %(message)s for the log message itself.
        formatter = logging.Formatter("%(asctime)s : %(levelname)s : %(name)s : %(message)s")
        #This line sets the formatter (formatter) created in the previous line to the FileHandler object (filehandler). This ensures that log records written by this handler will be formatted according to the specified format
        filehandler.setFormatter(formatter)

        #This line adds the FileHandler (filehandler) to the logger (logger). This means that any log records generated by this logger will also be sent to the FileHandler for writing to the log file.
        logger.addHandler(filehandler)
        #This line sets the logging level of the logger to DEBUG. This means that the logger will handle all log messages at the DEBUG level or above (DEBUG, INFO, WARNING, ERROR, CRITICAL).
        logger.setLevel(logging.INFO)
        return logger


    def ReadExcelData(self,path,sheet_name):
        final_list = []
        book = openpyxl.load_workbook(path)
        sheet = book[sheet_name]
        total_rows = sheet.max_row
        total_column = sheet.max_column
        for r in range(2,total_rows+1):
            row_list = []
            for c in range(1,total_column+1):
                row_list.append(sheet.cell(row=r, column=c).value)
            final_list.append(row_list)

        return final_list

    def wait_element(self):
        return self.driver.implicitly_wait(10)


